'''Ravi discovered that some strings read the same forwards and backwards, which are called palindromes.
He noticed that every string he encountered has at least one palindromic substring. He wants to know how to find the longest palindromic substring in a given string, S.
Can you help him determine the length of this longest palindromic substring?'''

def longest_palindromic_substring_length(n, s):
    max_len = 1  # Every single char is a palindrome of length 1

    for i in range(n):
        # Odd length palindrome centered at i
        l, r = i, i
        while l >= 0 and r < n and s[l] == s[r]:
            max_len = max(max_len, r - l + 1)
            l -= 1
            r += 1

        # Even length palindrome centered at i, i+1
        l, r = i, i + 1
        while l >= 0 and r < n and s[l] == s[r]:
            max_len = max(max_len, r - l + 1)
            l -= 1
            r += 1

    return max_len


def main():
    import sys
    input = sys.stdin.read
    data = input().strip().split()
    
    n = int(data[0])  # First input is the integer N
    s = data[1]  # Second input is the string S
    
    # Call user logic function and print the output
    result = longest_palindromic_substring_length(n, s)
    print(result)

if __name__ == "__main__":
    main()
